---
version: '2.0'

setupTLS_7x50_MDM:
  description: Issue/Reissue and install certificates and activate TLS on Nokia 7x50 routers
  type: direct

  tags:
    - WFM Demo
    - NSP20.6

  workflow_meta:
    author:  NOKIA DEMO
    version: '1.1.0'
    license: BSD-3
    package: NE Commissioning
    dependencies:
      platform:
        nspOS: ['20.6']

  input:
    - neId

  output:
    result: done
    expDateBefore: <% $.exp_old %>
    expDateAfter: <% $.exp_new %>

  output-on-error:
    result: failed

  tasks:
    checkHost:
      action: nsp.https
      input:
        url: <% locate_nsp("networkElements") %>/v1/networkElements?filter=neId='<% $.neId %>'
      publish:
        hostInfo: '<% task().result.content.response.data %>'
      on-success:
        - fail: <% $.hostInfo = [] %>
        - getHostInfo: <% $.hostInfo != [] %>

    getHostInfo:
      action: std.noop
      publish:
        host: <% $.hostInfo.ipAddress.first() %>
        hostname: <% $.hostInfo.neName.first() %>
        hosttype: <% $.hostInfo.sourceType.first() %>
      on-success:
        - fail: <% $.hosttype = 'nfmp' %>
        - checkCaCertificate: <% $.hosttype = 'mdm' %>

    checkCaCertificate:
      action: std.ssh
      input:
        host: <% env().pkiServer %>
        username: <% env().pkiUsername %>
        password: <% env().pkiPassword %>
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          /opt/nsp/os/jre/bin/keytool -list -alias mytelemetryca -keystore /opt/nsp/os/ssl/nsp.truststore -storepass '<% env().pkiStorepass %>'
      on-error:
        - initializeCA
      on-success:
        - checkHostCert

    checkHostCert:
      action: std.ssh
      input:
        host: <% env().pkiServer %>
        username: <% env().pkiUsername %>
        password: <% env().pkiPassword %>
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
      publish:
        exp_old: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-error:
        - copyCACertsToNode
      on-success:
        - reissueHostCert

    reissueHostCert:
      action: std.ssh
      input:
        host: <% env().pkiServer %>
        username: <% env().pkiUsername %>
        password: <% env().pkiPassword %>
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          cp -f <% $.hostname %>_cert.pem <% $.hostname %>_cert.pem.bak
          cp -f private/<% $.hostname %>_key.pem private/<% $.hostname %>_key.pem.bak
          openssl ca -revoke <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -cert CAcert.pem
          # sed -i '/CN=<% $.hostname %>/d' /etc/pki/CA/index.txt
          openssl genrsa -out private/<% $.hostname %>_key.pem 2048
          openssl req -out <% $.hostname %>_certreq.pem -key private/<% $.hostname %>_key.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=<% $.hostname %>/emailAddress=nobody@nokia.com"
          openssl ca  -out <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -batch -passin "pass:" -days 3650 -cert CAcert.pem -policy policy_anything -extensions SAN -extfile <(printf "[SAN]\nsubjectAltName=IP:<% $.host %>") -infiles <% $.hostname %>_certreq.pem
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
          curl --insecure --user <% env().neUsername %>:<% env().nePassword %> -T <% $.hostname %>_cert.pem sftp://<% $.host %>/<% env().cflash %>:/
          curl --insecure --user <% env().neUsername %>:<% env().nePassword %> -T private/<% $.hostname %>_key.pem sftp://<% $.host %>/<% env().cflash %>:/
      publish:
        exp_new: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-success:
        - importAndReloadCerts

    importAndReloadCerts:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        cmds:
          - /!classic-cli
          - admin certificate import type key  input <% env().cflash %>:/<% $.hostname %>_key.pem    output hostkey.crt  format pem
          - admin certificate import type cert input <% env().cflash %>:/<% $.hostname %>_cert.pem   output hostcert.crt format pem
          - admin certificate reload type cert-key-pair hostcert.crt protocol tls key-file hostkey.crt

    initializeCA:
      action: std.ssh
      input:
        host: <% env().pkiServer %>
        username: <% env().pkiUsername %>
        password: <% env().pkiPassword %>
        cmd: |
          mkdir /opt/nsp/os/ssl/certs/telemetry
          cd /opt/nsp/os/ssl/certs/telemetry
          mkdir private
          openssl genrsa -out private/CAkey.pem 2048
          openssl req -out CAreq.pem -key private/CAkey.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=NSP Development Root CA/emailAddress=nobody@nokia.com"
          touch /etc/pki/CA/index.txt
          openssl ca -out CAcert.pem -keyfile private/CAkey.pem -batch -days 3650 -selfsign -create_serial -passin "pass:" -extensions v3_ca -infiles CAreq.pem
          echo 01 > /etc/pki/CA/crlnumber
          openssl ca -out CAcrl.pem -keyfile private/CAkey.pem -batch -gencrl -cert CAcert.pem -passin "pass:"
          openssl genrsa -out private/key.pem 2048
          openssl x509 -outform der -in CAcert.pem -out CAcert.der
          unalias cp
          cp -f /opt/nsp/os/ssl/nsp.truststore /opt/nsp/os/ssl/nsp.truststore.bak
          echo -e "y" | /opt/nsp/os/jre/bin/keytool -import -alias myTelemetryCa -keystore /opt/nsp/os/ssl/nsp.truststore -file /opt/nsp/os/ssl/certs/telemetry/CAcert.der -storepass '<% env().pkiStorepass %>'
      on-success:
        - copyCACertsToNode

    copyCACertsToNode:
      action: std.ssh
      input:
        host: <% env().pkiServer %>
        username: <% env().pkiUsername %>
        password: <% env().pkiPassword %>
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          curl --insecure --user <% env().neUsername %>:<% env().nePassword %> -T CAcert.pem sftp://<% $.host %>/<% env().cflash %>:/
          curl --insecure --user <% env().neUsername %>:<% env().nePassword %> -T CAcrl.pem sftp://<% $.host %>/<% env().cflash %>:/
      on-success:
        - createAndCopyHostCerts

    createAndCopyHostCerts:
      action: std.ssh
      input:
        host: <% env().pkiServer %>
        username: <% env().pkiUsername %>
        password: <% env().pkiPassword %>
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          openssl genrsa -out private/<% $.hostname %>_key.pem 2048
          openssl req -out <% $.hostname %>_certreq.pem -key private/<% $.hostname %>_key.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=<% $.hostname %>/emailAddress=nobody@nokia.com"
          openssl ca  -out <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -batch -passin "pass:" -days 3650 -cert CAcert.pem -policy policy_anything -extensions SAN -extfile <(printf "[SAN]\nsubjectAltName=IP:<% $.host %>") -infiles <% $.hostname %>_certreq.pem
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
          curl --insecure --user <% env().neUsername %>:<% env().nePassword %> -T <% $.hostname %>_cert.pem sftp://<% $.host %>/<% env().cflash %>:/
          curl --insecure --user <% env().neUsername %>:<% env().nePassword %> -T private/<% $.hostname %>_key.pem sftp://<% $.host %>/<% env().cflash %>:/
      publish:
        exp_old: none
        exp_new: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-success:
        - importAllCerts

    importAllCerts:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        closeSession: false
        cmds:
          - /!classic-cli
          - admin certificate import type cert input <% env().cflash %>:/<% $.hostname %>_cert.pem   output hostcert.crt format pem
          - admin certificate import type key  input <% env().cflash %>:/<% $.hostname %>_key.pem    output hostkey.crt  format pem
          - admin certificate import type cert input <% env().cflash %>:/CAcert.pem output cacert.crt format pem
          - admin certificate import type crl  input <% env().cflash %>:/CAcrl.pem  output cacrl.crt  format pem
      publish:
        nodeTime: <% task().result.responses[2] %>
        sessionId: <% task().result.sessionId %>
      on-success:
        - configureTLS

    configureTLS:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        sessionId: <% $.sessionId %>
        closeSession: true
        cmds:
          - /!md-cli
          - edit-config private
          - configure system security pki ca-profile "tls-ca" admin-state enable
          - configure system security pki ca-profile "tls-ca" cert-file "cacert.crt"
          - configure system security pki ca-profile "tls-ca" crl-file "cacrl.crt"
          - configure system security tls cert-profile "tls-certs" admin-state enable
          - configure system security tls cert-profile "tls-certs" entry 1 certificate-file "hostcert.crt"
          - configure system security tls cert-profile "tls-certs" entry 1 key-file "hostkey.crt"
          - configure system security tls server-cipher-list "tls-ciphers" cipher 1 name tls-rsa-with-null-md5
          - configure system security tls server-cipher-list "tls-ciphers" cipher 2 name tls-rsa-with-null-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 3 name tls-rsa-with-null-sha256
          - configure system security tls server-cipher-list "tls-ciphers" cipher 4 name tls-rsa-with3des-ede-cbc-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 5 name tls-rsa-with-aes128-cbc-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 6 name tls-rsa-with-aes256-cbc-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 7 name tls-rsa-with-aes128-cbc-sha256
          - configure system security tls server-cipher-list "tls-ciphers" cipher 8 name tls-rsa-with-aes256-cbc-sha256
          - configure system security tls server-tls-profile "tls-server-profile" admin-state enable
          - configure system security tls server-tls-profile "tls-server-profile" cert-profile "tls-certs"
          - configure system security tls server-tls-profile "tls-server-profile" cipher-list "tls-ciphers"
          - commit
...