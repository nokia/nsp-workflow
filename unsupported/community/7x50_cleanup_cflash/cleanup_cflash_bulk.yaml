version: '2.0'

7x50_cleanup_cflash_bulk:
  type: direct

  description: Deletion of old files from CF-card in the specified directory

  tags:
    - demo workflow by NOKIA

  workflow_meta:
    title:   Cleanup SR OS node cflash (bulk operation)
    author:  NOKIA DEMO
    signature: 3b6ce2702655b675fb367a6ac29dcce617ca0b76eb881cbb47035bc5c67122c12c4310b585a56538e5ae6d4260165781b40698c33d2482ede43fd3e3eb3a4041e1bc3309cea9ee08fb55cc4cdb3026086fade1f0dbcf5c4a449fdcc6cb9cb619f68175f584cb00e5753749ff639aaa7078e4d53c1cec24512bec24c50080e5600c7d0d975f8bb4cc61544ff9b0cf6123ef316b8ddee69594cc37cde5356e1ef1d2656d819ad82f7767c2143cb3ad93931b4dd6b6d7213687da27a0b58ea75678b9153d62c0da692cb22c779e5cbe74016bc5f70de657659bebfdec9df231d19fb136ecdd745faa8ca2d3fdb8ced941f89dd509fbd49fc11290d53b584eeb5c94
    version: '1.0.0'
    license: BSD-3
    package: 7x50 Automation
    deprecated: false
    urls:
      homepage: https://github.com/nokia/nsp-workflow/tree/master/unsupported/7x50_cleanup_cflash
      repository: https://github.com/nokia/nsp-workflow
      bugs: https://github.com/nokia/nsp-workflow/issues
    dependencies:
      platform:
        nspOS: ['19.6']
        nfmp: ['19.6']
      nodal:
        - type: 'Nokia 7x50'
          releases: ['16.0', '19.5', '19.7']
          mgmtmode: ['classic', 'model-driven']

  input:
    - token_auth
    - neId: 1.1.1.1
    - dir: cf3:/act
    - deleteAge: 3600
    - dryRun: true

  vars:
    fileList: []
    success: False
    deleted: False

  output:
    files: <% $.fileList %>
    success: True
    deleted: <% $.deleted %>

  output-on-error:
    files: <% $.fileList %>
    success: False

  tasks:
    getEnvironment:
      action: environment
      publish:
        env: '<% task().result %>'
      on-success:
        checkHost

    checkHost:
      action: std.http
      input:
        url: <% locate_nsp("networkElements") %>/v1/networkElements?filter=neId='<% $.neId %>'
        method: GET
        verify: False
        headers:
          Content-Type: application/json
          Authorization: Bearer <% $.token_auth %>
      publish:
        hostInfo: '<% task().result.content.response.data %>'
      on-success:
        - fail: <% $.hostInfo = [] %>
        - getHostInfo: <% $.hostInfo != [] %>

    getHostInfo:
      action: std.noop
      publish:
        host:     <% $.hostInfo.ipAddress.first() %>
        hostname: <% $.hostInfo.neName.first() %>
        hosttype: <% $.hostInfo.sourceType.first() %>
      on-success:
        - showTime

    showTime:
      action: nsp.sr_cli
      input:
        host: <% $.host %>
        username: <% $.env.neUsername %>
        password: <% $.env.nePassword %>
        cmd: show time
      publish:
        nodeTime: <% task().result %>
      on-success:
        - readDirectory

    readDirectory:
      action: nsp.sr_cli
      input:
        host: <% $.host %>
        username: <% $.env.neUsername %>
        password: <% $.env.nePassword %>
        cmd:
          - /!classic-cli
          - environment no more
          - file dir <% $.dir %>
      publish:
        dirResults: <% task().result %>
      on-success:
        - applyFilter

    applyFilter:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var safeList = ['bof.cfg', 'config.cfg', 'NVRAM.DAT', 'bootlog.txt', 'boot.ldr'];

          var files = $.dirResults;
          var delAge = <% int($.deleteAge) %>;
          var nodeTime = $.nodeTime["cmd1-show time"][1];
          var delTime = Date.parse(nodeTime) - 1000*delAge;
          var timeZone = nodeTime.split(/\s+/)[4];

          var fileList = [];
          for (var key in files) {
            if (key.startsWith("cmd3-")) {
              var currDir = key.split(/\s/)[2];
              files[key].forEach(function(cmd) {
                if (cmd.match(/^[0-9]{2}/)) {
                  var file = cmd.split(/\s+/);
                  if (!(safeList.indexOf(file[3])>-1) && (file[2]!=="<DIR>")) {
                    var [hour, minute] = file[1].split(/:/);
                    if ( minute.endsWith("p") && Number(hour)!==12) {
                      hour = Number(hour) + 12;
                    }
                    minute = minute.substring(0, minute.length-1);
                    var fileTime = new Date(file[0]+" "+hour+":"+minute+" "+timeZone);
                    if (Number(fileTime) < delTime) {
                      var fileFdn = currDir + "/" + file[3];
                      fileList.push(fileFdn);
                    }
                  }
                }
              })
            }
          }
          return fileList;
      publish:
        fileList: <% task().result %>
      on-success:
        - buildCLI: <% $.dryRun != true %>

    buildCLI:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var cmdList=[];
          cmdList.push("/!classic-cli")
          $.fileList.forEach(function(fname) {
            cmdList.push("/file delete "+fname+ " force");
          });
          return cmdList;
      publish:
        cmdList: <% task().result %>
      on-success:
        - deleteFiles

    deleteFiles:
      action: nsp.sr_cli
      input:
        host: <% $.host %>
        username: <% $.env.neUsername %>
        password: <% $.env.nePassword %>
        cmd: <% $.cmdList %>
      publish:
        cliResponse: <% task().result %>
      on-success:
        - chkResponses

    chkResponses:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var cmd = $.cliResponse;
          var status = true;
          for (var key in cmd) {
            if (!(key.startsWith("cmd1"))) {
              if (!(cmd[key][1].endsWith("OK"))) {
                status = false;
              }
            }
          }
          return status
      publish:
        deleted: <% task().result %>

...
